%!PS-Adobe-3.0
%%Title: 
%%For:
%%Creator: Graphite0.1
%%CreationDate: 2007/01/30 17:43:23
%%BoundingBox: 20 20 1204 772
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 1
%%PageOrder: Ascend
%%DocumentMedia: Tabloid 1224 792 0 () ()
%%DocumentNeededResources
%%DocumentProcessColors: Color
%%EndComments
%%BeginProlog
%%Copyright: 
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
<< /PageSize [1224 792] >> setpagedevice
<< /MaxOpStack 300000 >> setuserparams
%%EndPageSetup
% debugging routines

% print the stack and then a separator for visibility
/prStack
{
  pstack (===\n) print
} bind def

% display a message, then dump stack so you can tell where you are
/disp
{
  print (\n) print pstack (===\n) print
} bind def

%display every symbol and value in a dictionary (fix the format!)
/dumpDict % dict ==> -
{
  {
    == ==
%    print (   ) print dup type ==  pop %(  ) print print
  } forall
} bind def


% base class for style definitions
/base <<
  /FontName /Helvetica
  /FontSize 12
>> def

% specific style type
/cream <<
  /Inherits base
  /FontName /Helvetica
  /FontSize 12
  /LineWidth 0
  /Color [.9 .9 .7]
  /BorderColor [0 0 0]
%  /BorderDash [3] 0
  /BorderWidth 2
>> def

/stevens <<
  /Inherits base
  /FontName /Helvetica
  /FontSize 18
  /LineWidth 0
  /Color [.7 .7 .7]
  /BorderColor [0 0 0]
  /BorderWidth 2
>> def

% choose a specific font and size
/selectFont { exch findfont exch scalefont setfont  } def

% generate a rectangular path
/rectPath  % x1,y1,x2,y2 -> -
{
  newpath
  2 copy  moveto           % x2,y2
  1 index 3 index lineto   % x2,y1
  3 index 3 index lineto   % x1,y1
  exch pop exch pop lineto % x1,y2
  closepath
} def

% generate a path of a rounded rectangle with corner radius r
/roundrectPath  % x1,y1,x2,y2 r -> -
{
  5 dict begin
    /r exch def
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y2 r sub prStack moveto
    x1 y1 x2 r sub y1 r arct % lower left rounded corner
    x2 y1 x2 y2 r sub r arct % lower right
    x2 y2 x1 r add y2 r arct % top right
    x1 y2 x1 y1 r add r arct % top left
  end
} def

 % x1,y1,x2,y2 -> -
/fillRect { rectPath fill } def

 % x1,y1,x2,y2 -> -
/drawRect { rectPath stroke } def

%TODO: roundrect needs SERIOUS help
 % x1,y1,x2,y2 -> -
/fillRoundRect { roundrectPath fill } def

 % x1,y1,x2,y2 -> -
/drawRoundRect { roundrectPath stroke } def

/setStyle
{
  dup /currentstyle exch def
  begin
    FontName FontSize selectFont
    LineWidth setlinewidth
    Color  aload  pop setrgbcolor
  end
} bind def


% create a rectangular border in the specified style
/createBorder % x1 y1 x2 y2 style createborder -
{
  setStyle
  prStack
  4 copy rectPath %rectfill
  fill
  rectPath
  gsave
  currentstyle
  begin
    BorderColor aload pop setrgbcolor
    BorderWidth setlinewidth
  end
%  [3] 0 setdash
  stroke  %rectstroke  
  grestore
} bind def

%
% do this next routine through a dict also!
%

% select a rectangle within the world and scale within it linearly
% the first 4 coords are paper coordinates
% the second 4 are world coordinates
% x1 y1 x2 y2 px1 py1 px2 py2 scaleRect -
/scaleRect {
  20 dict
  begin
  /pymax exch def
  /pxmax exch def
  /pymin exch def
  /pxmin exch def
  /ymax exch def
  /xmax exch def
  /ymin exch def
  /xmin exch def

  /xsize xmax xmin sub def
  /ysize ymax ymin sub def
  /pxsize pxmax pxmin sub def
  /pysize pymax pymin sub def

%  0 0 1 setrgbcolor
%  0 0 moveto
%  xsize 0 lineto
%  xsize ysize lineto
%  0 ysize lineto
%  fill

%  matrix setmatrix
%  0 ymax translate
%  1 -1 scale
  xmin ymin translate
  xsize pxsize div ysize pysize div scale
  pxmin neg pymin neg translate
%  -74.1 40.5 transform (foo3)disp
%  -73.0 41 transform (foo3)disp
  end
} bind def

% Include an eps file, saving state from badly behaved files
% filename scalex scaley dx dy includeEPS -
/includeEPS {
  5 dict begin
%  matrix setmatrix
%  matrix currentmatrix
  /showpage {} def
  /setpagedevice /pop load def
%  pop pop
  translate
  scale
  exch
  save
} bind def

% ang m x y -> -
/simpleArrow
{
  moveto 
  gsave rotate %setmatrix rotate
  0 1 rlineto
  .1 -.3 rlineto
  -.2 0 rmoveto
  .1 .3 rlineto stroke
  grestore
} bind def

% ang scale x y -> -
/scaledSimpleArrow
{
  moveto 
  gsave dup scale rotate
  0 1 rlineto

  -.1 -.3 rlineto
  +.2 0 rlineto
  -.1 .3 rlineto fill
  grestore
} bind def

/logScaledSimpleArrow
{
  moveto 
  gsave setmatrix log dup scale rotate
  0 1 rlineto
  .1 -.3 rlineto
  -.2 0 rmoveto
  .1 .3 rlineto stroke
  grestore
} bind def

/dispTextAt {
  /mat exch def
  /arr exch def
  0 3 arr length 1 sub {
    /i exch def
    arr i get 
    arr i 1 add get 
    arr i 2 add get
    moveto gsave mat pstack setmatrix show grestore
  } for
} bind def

% display text centered
/horizCenteredText {  
  /xmax exch def
  /xmin exch def
  /y exch def
  /text exch def
  xmax xmin add text stringwidth sub .5 mul y moveto
  text show
} bind def

/graphite <<
  /Styles 100 dict
  /Colormaps 5 dict
  /Borders 5 dict
>> def

/defineStyle {
  graphite /Styles get exch store
} bind def

/getStyle {
  graphite /Styles get exch get
} bind def

/defineColormap {
  graphite /Colormaps get 3 1 roll put
} bind def

/getColormap {
  graphite /Colormaps get exch get
} bind def


/ROYGBIV <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [6]
    /BitsPerSample 8
    /DataSource 
    <800090
    0080FF
    00FFFF
    FFFF00
    FF0000
    800000>
  >> defineColormap

/RedBlue <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [9]
    /BitsPerSample 8
    /DataSource 
    <400000
    800000
    C00000
    FF0000
    FFFFFF
    0000FF
    0000C0
    000080
    000040>
  >> defineColormap

/BlueRed <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [9]
    /BitsPerSample 8
    /DataSource 
    <400000
    800000
    C00000
    FF0000
    FFFFFF
    0000FF
    0000C0
    000080
    000040>
  >> defineColormap

/RedGreen <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [9]
    /BitsPerSample 8
    /DataSource 
    <400000
    800000
    C00000
    FF0000
    FFFFFF
    00FF00
    00C000
    008000
    004000>
  >> defineColormap

/GreenRed <<
  /FunctionType 0
    /Domain [0 1]
    /Range [0 1 0 1 0 1]
    /Size [9]
    /BitsPerSample 8
    /DataSource 
    <400000
    800000
    C00000
    FF0000
    FFFFFF
    00FF00
    00C000
    008000
    004000>
  >> defineColormap

/drawquad
{
  moveto
  lineto
  lineto
  lineto
  closepath
  stroke
} bind def

/fillquad
{
  mul cvi setcolor
  moveto
  lineto
  lineto
  lineto
  fill
} bind def


/plotmaskedmatrix {
  5 dict begin
  /grid exch def

  0 setlinewidth
  0 1 grid /jmax get 1 sub  {
    /j exch def
    grid /mask get j get /row exch def
    0 1 grid /imax get 1 sub {
      /i exch def
      row i get 48 ne {
	i j 1 1 rectstroke
      } if
    } for
  } for
  end
} bind def

/numbermaskedmatrix {
  8 dict begin
  /varname exch def
  /grid exch def
  /valindex 0 def
  0 setlinewidth
  0 1 grid /jmax get 1 sub  {
    /j exch def
    grid /mask get j get /row exch def
    0 1 grid /imax get 1 sub {
      /i exch def
      row i get 48 ne {
	i j 1 1 rectstroke
	i j moveto
	grid varname get valindex get (        ) cvs 0 2 getinterval show
	/valindex valindex 1 add def
      } if
    } for
  } for
  end
} bind def


/fillmaskedmatrix {
  8 dict begin
  /varname exch def
  /grid exch def
  /colorscale 1 100 div 255 mul def
  /valindex 0 def
  0 setlinewidth
  0 1 grid /jmax get 1 sub  {
    /j exch def
    grid /mask get j get /row exch def
    0 1 grid /imax get 1 sub {
      /i exch def
      row i get 48 ne {
	grid varname get valindex get colorscale mul cvi setcolor
	i j 1 1 rectfill

	/valindex valindex 1 add def
      } if
    } for
  } for
  end
} bind def


/setbluepalette {
  [/Indexed /DeviceRGB 255
    <FFFFFF
      FCFCFF F8F8FF F4F4FF F0F0FF ECECFF E8E8FF E4E4FF E0E0FF
      DCDCFF D8D8FF D4D4FF D0D0FF CCCCFF C8C8FF C4C4FF C0C0FF
      BCBCFF B8B8FF B4B4FF B0B0FF ACACFF A8A8FF A4A4FF A0A0FF 
      9C9CFF 9898FF 9494FF 9090FF 8C8CFF 8888FF 8484FF 8080FF
      7C7CFF 7878FF 7474FF 7070FF 6C6CFF 6868FF 6464FF 6060FF
      5C5CFF 5858FF 5454FF 5050FF 4C4CFF 4848FF 4444FF 4040FF
      3C3CFF 3838FF 3434FF 3030FF 2C2CFF 2828FF 2424FF 2020FF
      1C1CFF 1818FF 1414FF 1010FF 0C0CFF 0808FF 0404FF
     0000FF 0000FE 0000FD 0000FC 0000FB 0000FA 0000F9 0000F8
     0000F7 0000F6 0000F5 0000F4 0000F3 0000F2 0000F1 0000F0
     0000EF 0000EE 0000ED 0000EC 0000EB 0000EA 0000E9 0000E8
     0000E7 0000E6 0000E5 0000E4 0000E3 0000E2 0000E1 0000E0
     0000DF 0000DE 0000DD 0000DC 0000DB 0000DA 0000D9 0000D8
     0000D7 0000D6 0000D5 0000D4 0000D3 0000D2 0000D1 0000D0
     0000CF 0000CE 0000CD 0000CC 0000CB 0000CA 0000C9 0000C8
     0000C7 0000C6 0000C5 0000C4 0000C3 0000C2 0000C1 0000C0
     0000BF 0000BE 0000BD 0000BC 0000BB 0000BA 0000B9 0000B8
     0000B7 0000B6 0000B5 0000B4 0000B3 0000B2 0000B1 0000B0
     0000AF 0000AE 0000AD 0000AC 0000AB 0000AA 0000A9 0000A8
     0000A7 0000A6 0000A5 0000A4 0000A3 0000A2 0000A1 0000A0
     00009F 00009E 00009D 00009C 00009B 00009A 000099 000098
     000097 000096 000095 000094 000093 000092 000091 000090
     00008F 00008E 00008D 00008C 00008B 00008A 000089 000088
     000087 000086 000085 000084 000083 000082 000081 000080
     00007F 00007E 00007D 00007C 00007B 00007A 000079 000078
     000077 000076 000075 000074 000073 000072 000071 000070
     00006F 00006E 00006D 00006C 00006B 00006A 000069 000068
     000067 000066 000065 000064 000063 000062 000061 000060
     00005F 00005E 00005D 00005C 00005B 00005A 000059 000058
     000057 000056 000055 000054 000053 000052 000051 000050
     00004F 00004E 00004D 00004C 00004B 00004A 000049 000048
     000047 000046 000045 000044 000043 000042 000041 000040>
%      00003C000038000034000030000000002C000028000024000020
%      00001C000018000014000010000000000C000008000004000000
   ] setcolorspace
} bind def

/block <<
  /x 20
  /y 80
  /dx 0
  /dy -14
  /style /normal
%  /background /none
%  /border /none
  /text [
    (this is a test)
    (this is only a test)
    (if this had been an actual test, you'd know)
    (BGIAJ)
  ]
>> def

/t1 <<
  /x 20
  /y 100
  /dx 0
  /dy -14
  /style /title
%  /background /none
%  /border /none
  /text [
    (Postscript Rules!)
  ]
>> def

/styles <<
  /normal { /Helvetica findfont 12 scalefont setfont 0 0 0 setrgbcolor }
  /title { /Helvetica-bold findfont 24 scalefont setfont }
  /subtitle { /Helvetica findfont 18 scalefont setfont }
  /notes { /Helvetica findfont 8 scalefont setfont }
>> def

/drawTextBlock {
  5 dict begin
  /block exch def
  styles  block /style get get exec
  /x block /x get def 
  /y block /y get def
  block /text get {
    x y moveto pstack show
    /x x block /dx get add def
    /y y block /dy get add def
  } forall
  end
} bind def

/leftJustInBox { % x y step
  /dy exch def
  /y exch def
  /x exch def
  {
    x y moveto
    show
    /y y dy sub def
  } forall
} bind def 

% [ (string) (string) ...] dx dy x y -> -
/displayTextBlock {
  5 dict begin
    /y exch def
    /x exch def
    /dy exch def
    /dx exch def
    {
      x y    moveto dup stringwidth -.5 mul exch  -.5 mul exch rmoveto show
      /x x dx add def
      /y y dy add def

     } forall
  end
} bind def

/drawgrid {
    /ny exch def
    /ymax exch def
    /ymin exch def
    /nx exch def
    /xmax exch def
    /xmin exch def
    ymin ymax ymin sub ny 1 sub div ymax {
	dup dup xmin exch moveto xmax exch lineto stroke
    } for
    xmin xmax xmin sub nx 1 sub div xmax {
	dup dup ymin moveto ymax lineto stroke
    } for
} bind def

%
% xmin xmax numdivisions ymin ymax numdivisions numgrid - 
% Draws numbers on the axis
%
/numgrid {
  10 dict begin
    /ny exch def
    /ymax exch def
    /ymin exch def
    /nx exch def
    /xmax exch def
    /xmin exch def
    /text (      ) def
    ymin ymax ymin sub ny 1 sub div ymax {
%      dup text cvs stringwidth .5 mul 2 index sub neg 
%      exch .5 mul xmin exch sub exch moveto (             ) cvs show
      dup xmin exch 2 copy == == (\n) print  moveto (      ) cvs show
    } for
    xmin xmax xmin sub nx 1 sub div xmax {
	dup .05 sub ymin .1 sub moveto (             ) cvs show
    } for
  end
} bind def

%
% array of arrays of x y points: [  [x y x y ...] [x y x y ..] ...] drawcoastline -
% Draw polygon for each internal array
% A different version could fill in the future, but the polygons would have to
% be higher quality. the current set is not always properly closed
%
/drawcoastline {
    {
	/arr exch def
	newpath
	arr arr length 2 sub get arr arr length 1 sub get moveto
	arr aload length 2 idiv
	{
	    lineto
	} repeat
	stroke
    } forall
} bind def

% [x] [y] -> -
/lineplot {
  5 dict begin
      /y exch def	
      /x exch def	
      x 0 get y 0 get moveto
      1 1 x length 1 sub {
	  dup x exch get exch y exch get lineto
      } for
      stroke
  end
} def

% [x] [mag] [ang] scale /arrowname -> -
/vectorplot {
  5 dict begin
      /arrow exch arrows exch get def
%      /arrowname exch def
      /scaleval exch def
      /angle exch def
      /mag exch def
      /x exch def

      %currentdict /arrow get ==
      
      0 setlinewidth
      0 1 x length 1 sub {
%       0 1 3 {
	  /i exch def
%	  i ==  (go) ==

	  angle i get scaleval x i get mag i get arrow
%	  angle i get scaleval x i get mag i get prStack arrows /a1 get exec prStack 
      } for
  end
} def
    
% [x] [y] scale /markerroutine -> -
/markerplot {
  marker exch get /marker exch def
  /sc exch def
  /y exch def
  /x exch def
  0 1 x length 1 sub {
    dup x exch get exch y exch get sc 3 1 roll currentdict marker get exec
  } for
  stroke
} def

% start inc count y0pts y1pts m a -> -
% draw tick marks on the x axis
% start inc end are all in world coordinates
% y0 y1 are the endpoints of the line in points
% m and a are the conversion factors to convert start,inc,end to points
/xtick {
	8 dict begin
  /a exch def
  /m exch def
  /y1pts exch def
  /y0pts exch def
  /count exch def
  /inc exch def
  /start exch def
  0 1 count 1 sub
  {
	 inc mul
	 start add
    m mul a add dup y0pts moveto y1pts lineto stroke
  } for
  end
} def

% same as xtick above except for y axes. This should eventually be
% the same code using transformations, but for now this is easier
/ytick {
	8 dict begin
  /a exch def
  /m exch def
  /x1pts exch def
  /x0pts exch def
  /count exch def
  /inc exch def
  /start exch def
  0 1 count 1 sub
  {
	 inc mul
	 start add
    m mul a add dup x0pts exch moveto x1pts exch lineto stroke
  } for
} def

% all markers go in the marker dict
% all take the following args:
% scale x y -> -
/markers <<
  /square {
    newpath
    moveto 
    gsave
      dup scale
      -1 -1 rmoveto
      2 0 rlineto
      0 2 rlineto
      -2 0 rlineto
      closepath
      stroke
    grestore
  } 
    
  /circle {
    newpath
    gsave
      2 index 0 360 arc stroke pop
    grestore  
  } 

  /x {
    gsave
      newpath
      moveto dup scale
      -1 -1 rmoveto
      +2 +2 rlineto
      +0 -2 rmoveto
      -2 +2 rlineto
      stroke
    grestore
  } 

  /plus {
    gsave
      newpath
      moveto dup scale
      -1 0 rmoveto
      +2 0 rlineto
      -1 -1 rmoveto
      0 +2 rlineto
      stroke
    grestore
  } 

  /diamond {
    gsave
      newpath
      moveto dup scale
      -1 0 rmoveto
      +1 +1 rlineto
      +1 -1 rlineto
      -1 -1 rlineto
      closepath
      fill
    grestore
  } 

>> def

% all arrows take rot scale x y -> -
/arrows <<
  /a1 {
      gsave
      newpath
      translate 0 0 moveto dup scale rotate
		0   .05 rlineto
		.75  0 rlineto
		-.25 +.15 rlineto
		.5   -.2 rlineto
		-.5  -.2 rlineto
		+.25 +.15 rlineto
		-.75 0 rlineto
		closepath
%      1 0 rlineto
%      -.5  -.15 rlineto
%      +.25 +.15 rlineto
%      -.25 +.15 rlineto
%      +.5  -.15 rlineto
      fill
      grestore
  }

  /a2 {
      gsave
      newpath
      translate 0 0 moveto dup scale rotate
      0 1 rlineto
      -.15 -.35 rlineto
      +.3 0 rmoveto
      -.15 +.35 rlineto
      stroke
      grestore
  }
  /a3 {
      gsave
      newpath
      translate 0 0 moveto dup scale rotate
      0 1 rlineto
      +.15 -.35 rlineto
      stroke
      grestore
  }
>> def

% scale x y /marker -> -
/strokeMarker {
  markers exch get exec
  stroke
  grestore
} def

% r g b scale x y /marker -> -
/strokeAndFillMarker {
  markers exch get exec
  gsave
  stroke
  grestore
  setrgbcolor
  fill
  grestore
} def

% scale x y /marker -> -
/fillMarker {
  markers exch get exec
  fill
  grestore
} def





/Helvetica 12 selectFont
%graph
.8 .9 .9 setrgbcolor
75 500 1200 750 fillRect
0 0 0 setrgbcolor
75 500 1200 750 drawRect
0 4 12 500 510 23.4375 75  xtick
0 4 12 750 740 23.4375 75  xtick
[ (00)(04)(08)(12)(16)(20)(24)(28)(32)(36)(40)(44)(48)] 93.75 0 75 485 displayTextBlock 
0 2 4 75 85 32.0512820512821 500  ytick
0 2 4 1200 1190 32.0512820512821 500  ytick
[ (0.0)(2.0)(4.0)(6.0)(8.0)] 0 64.1025641025641 50 500 displayTextBlock 
[75.000000 
77.343750 
79.687500 
82.031250 
84.375000 
86.718750 
89.062500 
91.406250 
93.750000 
96.093750 
98.437500 
100.781250 
103.125000 
105.468750 
107.812500 
110.156250 
112.500000 
114.843750 
117.187500 
119.531250 
121.875000 
124.218750 
126.562500 
128.906250 
131.250000 
133.593750 
135.937500 
138.281250 
140.625000 
142.968750 
145.312500 
147.656250 
150.000000 
152.343750 
154.687500 
157.031250 
159.375000 
161.718750 
164.062500 
166.406250 
168.750000 
171.093750 
173.437500 
175.781250 
178.125000 
180.468750 
182.812500 
185.156250 
187.500000 
189.843750 
192.187500 
194.531250 
196.875000 
199.218750 
201.562500 
203.906250 
206.250000 
208.593750 
210.937500 
213.281250 
215.625000 
217.968750 
220.312500 
222.656250 
225.000000 
227.343750 
229.687500 
232.031250 
234.375000 
236.718750 
239.062500 
241.406250 
243.750000 
246.093750 
248.437500 
250.781250 
255.468750 
257.812500 
260.156250 
262.500000 
264.843750 
267.187500 
269.531250 
271.875000 
274.218750 
276.562500 
278.906250 
281.250000 
283.593750 
285.937500 
288.281250 
290.625000 
292.968750 
295.312500 
297.656250 
300.000000 
302.343750 
304.687500 
307.031250 
309.375000 
311.718750 
314.062500 
316.406250 
318.750000 
321.093750 
323.437500 
325.781250 
328.125000 
330.468750 
332.812500 
335.156250 
337.500000 
339.843750 
342.187500 
344.531250 
346.875000 
349.218750 
351.562500 
353.906250 
356.250000 
358.593750 
360.937500 
365.625000 
367.968750 
370.312500 
375.000000 
377.343750 
379.687500 
382.031250 
384.375000 
386.718750 
389.062500 
391.406250 
393.750000 
396.093750 
398.437500 
403.125000 
405.468750 
407.812500 
410.156250 
412.500000 
414.843750 
417.187500 
419.531250 
421.875000 
424.218750 
426.562500 
428.906250 
431.250000 
433.593750 
435.937500 
438.281250 
440.625000 
442.968750 
445.312500 
447.656250 
450.000000 
452.343750 
454.687500 
457.031250 
459.375000 
461.718750 
464.062500 
468.750000 
473.437500 
475.781250 
478.125000 
482.812500 
485.156250 
487.500000 
492.187500 
496.875000 
499.218750 
501.562500 
503.906250 
506.250000 
508.593750 
513.281250 
517.968750 
522.656250 
525.000000 
527.343750 
529.687500 
532.031250 
534.375000 
536.718750 
541.406250 
543.750000 
546.093750 
548.437500 
553.125000 
555.468750 
560.156250 
562.500000 
567.187500 
569.531250 
574.218750 
578.906250 
583.593750 
588.281250 
590.625000 
592.968750 
595.312500 
600.000000 
602.343750 
604.687500 
609.375000 
611.718750 
616.406250 
618.750000 
623.437500 
625.781250 
628.125000 
630.468750 
635.156250 
639.843750 
644.531250 
646.875000 
649.218750 
651.562500 
653.906250 
656.250000 
660.937500 
663.281250 
665.625000 
667.968750 
670.312500 
675.000000 
679.687500 
684.375000 
686.718750 
689.062500 
691.406250 
693.750000 
698.437500 
700.781250 
703.125000 
705.468750 
710.156250 
712.500000 
714.843750 
719.531250 
724.218750 
726.562500 
728.906250 
731.250000 
733.593750 
735.937500 
740.625000 
742.968750 
747.656250 
750.000000 
752.343750 
754.687500 
757.031250 
761.718750 
764.062500 
766.406250 
768.750000 
771.093750 
773.437500 
775.781250 
780.468750 
782.812500 
787.500000 
789.843750 
792.187500 
794.531250 
799.218750 
803.906250 
806.250000 
810.937500 
813.281250 
815.625000 
817.968750 
820.312500 
822.656250 
827.343750 
829.687500 
832.031250 
834.375000 
839.062500 
841.406250 
846.093750 
848.437500 
850.781250 
853.125000 
855.468750 
857.812500 
860.156250 
862.500000 
867.187500 
869.531250 
871.875000 
876.562500 
878.906250 
881.250000 
883.593750 
885.937500 
888.281250 
890.625000 
892.968750 
897.656250 
900.000000 
902.343750 
904.687500 
907.031250 
909.375000 
911.718750 
914.062500 
916.406250 
918.750000 
921.093750 
925.781250 
930.468750 
932.812500 
937.500000 
939.843750 
942.187500 
944.531250 
949.218750 
951.562500 
953.906250 
956.250000 
958.593750 
963.281250 
965.625000 
967.968750 
970.312500 
972.656250 
975.000000 
977.343750 
979.687500 
982.031250 
984.375000 
986.718750 
989.062500 
991.406250 
993.750000 
996.093750 
998.437500 
1000.781250 
1003.125000 
1005.468750 
1007.812500 
1012.500000 
1014.843750 
1019.531250 
1021.875000 
1024.218750 
1026.562500 
1028.906250 
1031.250000 
1033.593750 
1035.937500 
1038.281250 
1040.625000 
1042.968750 
1045.312500 
1050.000000 
1052.343750 
1054.687500 
1057.031250 
1059.375000 
1061.718750 
1064.062500 
1066.406250 
1068.750000 
1071.093750 
1073.437500 
1075.781250 
1078.125000 
1080.468750 
1082.812500 
1087.500000 
1089.843750 
1094.531250 
1099.218750 
1101.562500 
1106.250000 
1108.593750 
1110.937500 
1113.281250 
1115.625000 
1117.968750 
1120.312500 
1122.656250 
1125.000000 
1127.343750 
1129.687500 
1132.031250 
1136.718750 
1139.062500 
1141.406250 
1143.750000 
1146.093750 
1148.437500 
1150.781250 
1153.125000 
1155.468750 
1157.812500 
1160.156250 
1162.500000 
1164.843750 
1167.187500 
1169.531250 
1174.218750 
1176.562500 
1178.906250 
1181.250000 
1185.937500 
1188.281250 
1190.625000 
1195.312500 
1197.656250 
1200.000000 
1202.343750 
1204.687500 
1207.031250 
1209.375000 
1211.718750 
1214.062500 
1216.406250 
1218.750000 
1223.437500 
1225.781250 
1228.125000 
1230.468750 
1232.812500 
1235.156250 
1237.500000 
1239.843750 
1242.187500 
1244.531250 
1246.875000 
1249.218750 
1251.562500 
1253.906250 
1256.250000 
1258.593750 
1260.937500 
1263.281250 
1265.625000 
1267.968750 
1272.656250 
1275.000000 
1277.343750 
1279.687500 
1282.031250 
1284.375000 
1286.718750 
1289.062500 
1291.406250 
1293.750000 
1296.093750 
1298.437500 
1300.781250 
1303.125000 
1305.468750 
1310.156250 
1312.500000 
1317.187500 
1321.875000 
1324.218750 
1326.562500 
1328.906250 
1331.250000 
1333.593750 
1335.937500 
1338.281250 
1340.625000 
1342.968750 
1347.656250 
1350.000000 
1352.343750 
1354.687500 
1359.375000 
1364.062500 
1366.406250 
1368.750000 
1371.093750 
1373.437500 
1375.781250 
1380.468750 
1382.812500 
1385.156250 
1387.500000 
1389.843750 
1394.531250 
1396.875000 
1399.218750 
1401.562500 
1403.906250 
1406.250000 
1410.937500 
1413.281250 
1415.625000 
1420.312500 
1422.656250 
1425.000000 
1427.343750 
1429.687500 
1432.031250 
1434.375000 
1436.718750 
1439.062500 
1441.406250 
1446.093750 
1448.437500 
1450.781250 
1453.125000 
1455.468750 
1457.812500 
1460.156250 
1462.500000 
1464.843750 
1467.187500 
1469.531250 
1471.875000 
1474.218750 
1476.562500 
1478.906250 
1483.593750 
1485.937500 
1488.281250 
1490.625000 
1492.968750 
1495.312500 
1497.656250 
1500.000000 
1502.343750 
1504.687500 
1507.031250 
1509.375000 
1511.718750 
1514.062500 
1516.406250 
1521.093750 
1523.437500 
1525.781250 
1528.125000 
1530.468750 
1532.812500 
1535.156250 
1537.500000 
1539.843750 
1542.187500 
1544.531250 
1549.218750 
1551.562500 
1553.906250 
1556.250000 
1558.593750 
1560.937500 
1563.281250 
1565.625000 
1570.312500 
1572.656250 
1575.000000 
1577.343750 
1584.375000 
1586.718750 
1589.062500 
1591.406250 
1593.750000 
1596.093750 
1600.781250 
1603.125000 
1607.812500 
1610.156250 
1612.500000 
1614.843750 
1617.187500 
1619.531250 
1621.875000 
1624.218750 
1626.562500 
1628.906250 
1631.250000 
1633.593750 
1635.937500 
1638.281250 
1640.625000 
1645.312500 
1647.656250 
1650.000000 
1652.343750 
1654.687500 
1657.031250 
1659.375000 
1661.718750 
1664.062500 
1666.406250 
1668.750000 
1673.437500 
1675.781250 
1678.125000 
1680.468750 
1682.812500 
1685.156250 
1687.500000 
1692.187500 
1694.531250 
1696.875000 
1699.218750 
1703.906250 
1706.250000 
1708.593750 
1710.937500 
1713.281250 
1715.625000 
1717.968750 
1720.312500 
1722.656250 
1725.000000 
1727.343750 
1732.031250 
1734.375000 
1736.718750 
1739.062500 
1741.406250 
1743.750000 
1746.093750 
1748.437500 
1750.781250 
1753.125000 
1755.468750 
1757.812500 
1760.156250 
] [711.538462 
701.923077 
631.410256 
689.102564 
673.076923 
669.871795 
666.666667 
689.102564 
701.923077 
663.461538 
701.923077 
647.435897 
637.820513 
673.076923 
660.256410 
631.410256 
618.589744 
650.641026 
647.435897 
653.846154 
660.256410 
644.230769 
673.076923 
660.256410 
663.461538 
669.871795 
634.615385 
657.051282 
631.410256 
618.589744 
644.230769 
663.461538 
634.615385 
637.820513 
628.205128 
663.461538 
641.025641 
615.384615 
621.794872 
653.846154 
682.692308 
653.846154 
657.051282 
615.384615 
660.256410 
625.000000 
602.564103 
615.384615 
618.589744 
608.974359 
583.333333 
583.333333 
602.564103 
621.794872 
637.820513 
634.615385 
647.435897 
660.256410 
612.179487 
634.615385 
586.538462 
653.846154 
615.384615 
621.794872 
647.435897 
612.179487 
605.769231 
628.205128 
618.589744 
596.153846 
576.923077 
621.794872 
592.948718 
573.717949 
557.692308 
576.923077 
576.923077 
573.717949 
554.487179 
554.487179 
557.692308 
551.282051 
564.102564 
605.769231 
599.358974 
576.923077 
567.307692 
564.102564 
560.897436 
554.487179 
554.487179 
554.487179 
532.051282 
538.461538 
525.641026 
554.487179 
564.102564 
560.897436 
564.102564 
538.461538 
554.487179 
557.692308 
548.076923 
544.871795 
554.487179 
548.076923 
557.692308 
525.641026 
509.615385 
522.435897 
519.230769 
519.230769 
506.410256 
538.461538 
570.512821 
573.717949 
580.128205 
560.897436 
586.538462 
538.461538 
548.076923 
551.282051 
557.692308 
541.666667 
538.461538 
522.435897 
544.871795 
528.846154 
522.435897 
512.820513 
532.051282 
538.461538 
544.871795 
541.666667 
544.871795 
538.461538 
557.692308 
570.512821 
573.717949 
583.333333 
583.333333 
580.128205 
576.923077 
570.512821 
554.487179 
538.461538 
551.282051 
557.692308 
538.461538 
557.692308 
528.846154 
509.615385 
532.051282 
532.051282 
522.435897 
528.846154 
525.641026 
522.435897 
516.025641 
516.025641 
506.410256 
525.641026 
519.230769 
500.000000 
512.820513 
506.410256 
519.230769 
519.230769 
528.846154 
525.641026 
525.641026 
516.025641 
525.641026 
528.846154 
528.846154 
522.435897 
532.051282 
525.641026 
522.435897 
532.051282 
548.076923 
544.871795 
557.692308 
544.871795 
525.641026 
544.871795 
554.487179 
544.871795 
532.051282 
544.871795 
551.282051 
544.871795 
541.666667 
551.282051 
528.846154 
532.051282 
535.256410 
516.025641 
516.025641 
503.205128 
506.410256 
509.615385 
519.230769 
516.025641 
519.230769 
519.230769 
525.641026 
535.256410 
528.846154 
509.615385 
509.615385 
522.435897 
525.641026 
528.846154 
522.435897 
503.205128 
500.000000 
500.000000 
500.000000 
500.000000 
500.000000 
500.000000 
525.641026 
544.871795 
528.846154 
525.641026 
532.051282 
532.051282 
509.615385 
519.230769 
512.820513 
528.846154 
532.051282 
525.641026 
535.256410 
525.641026 
525.641026 
519.230769 
509.615385 
525.641026 
522.435897 
525.641026 
516.025641 
548.076923 
512.820513 
522.435897 
528.846154 
538.461538 
509.615385 
551.282051 
538.461538 
583.333333 
570.512821 
608.974359 
615.384615 
596.153846 
551.282051 
538.461538 
538.461538 
564.102564 
548.076923 
548.076923 
528.846154 
532.051282 
538.461538 
564.102564 
564.102564 
554.487179 
554.487179 
535.256410 
538.461538 
528.846154 
532.051282 
548.076923 
535.256410 
528.846154 
522.435897 
519.230769 
519.230769 
512.820513 
516.025641 
512.820513 
516.025641 
500.000000 
500.000000 
500.000000 
500.000000 
506.410256 
512.820513 
532.051282 
538.461538 
541.666667 
557.692308 
576.923077 
580.128205 
596.153846 
583.333333 
573.717949 
589.743590 
580.128205 
576.923077 
560.897436 
557.692308 
570.512821 
548.076923 
535.256410 
538.461538 
522.435897 
525.641026 
522.435897 
503.205128 
535.256410 
535.256410 
583.333333 
516.025641 
525.641026 
548.076923 
551.282051 
541.666667 
541.666667 
532.051282 
532.051282 
532.051282 
544.871795 
557.692308 
567.307692 
560.897436 
554.487179 
554.487179 
573.717949 
583.333333 
557.692308 
570.512821 
570.512821 
570.512821 
564.102564 
602.564103 
589.743590 
560.897436 
564.102564 
580.128205 
567.307692 
567.307692 
567.307692 
564.102564 
570.512821 
592.948718 
564.102564 
580.128205 
586.538462 
615.384615 
589.743590 
599.358974 
628.205128 
608.974359 
589.743590 
583.333333 
589.743590 
586.538462 
599.358974 
560.897436 
580.128205 
580.128205 
583.333333 
589.743590 
560.897436 
567.307692 
576.923077 
576.923077 
583.333333 
586.538462 
573.717949 
567.307692 
557.692308 
567.307692 
544.871795 
580.128205 
554.487179 
557.692308 
541.666667 
538.461538 
541.666667 
532.051282 
522.435897 
519.230769 
532.051282 
532.051282 
528.846154 
544.871795 
544.871795 
532.051282 
544.871795 
535.256410 
548.076923 
548.076923 
541.666667 
541.666667 
554.487179 
538.461538 
512.820513 
516.025641 
522.435897 
519.230769 
522.435897 
512.820513 
500.000000 
564.102564 
560.897436 
560.897436 
557.692308 
663.461538 
650.641026 
641.025641 
628.205128 
647.435897 
653.846154 
650.641026 
637.820513 
647.435897 
641.025641 
608.974359 
608.974359 
599.358974 
612.179487 
608.974359 
589.743590 
586.538462 
586.538462 
589.743590 
586.538462 
583.333333 
599.358974 
586.538462 
589.743590 
605.769231 
599.358974 
596.153846 
596.153846 
605.769231 
615.384615 
618.589744 
599.358974 
592.948718 
605.769231 
634.615385 
618.589744 
634.615385 
602.564103 
615.384615 
602.564103 
618.589744 
583.333333 
608.974359 
592.948718 
602.564103 
618.589744 
621.794872 
621.794872 
637.820513 
634.615385 
637.820513 
641.025641 
628.205128 
615.384615 
644.230769 
660.256410 
685.897436 
676.282051 
676.282051 
701.923077 
701.923077 
721.153846 
737.179487 
721.153846 
682.692308 
666.666667 
705.128205 
750.000000 
705.128205 
673.076923 
708.333333 
721.153846 
708.333333 
701.923077 
682.692308 
660.256410 
650.641026 
689.102564 
663.461538 
653.846154 
679.487179 
695.512821 
625.000000 
625.000000 
644.230769 
657.051282 
657.051282 
705.128205 
701.923077 
689.102564 
733.974359 
689.102564 
698.717949 
682.692308 
698.717949 
663.461538 
679.487179 
653.846154 
689.102564 
689.102564 
621.794872 
653.846154 
634.615385 
657.051282 
637.820513 
625.000000 
631.410256 
634.615385 
634.615385 
608.974359 
666.666667 
685.897436 
666.666667 
698.717949 
644.230769 
708.333333 
682.692308 
663.461538 
644.230769 
650.641026 
660.256410 
673.076923 
663.461538 
653.846154 
625.000000 
676.282051 
685.897436 
641.025641 
698.717949 
634.615385 
676.282051 
650.641026 
647.435897 
663.461538 
673.076923 
653.846154 
663.461538 
730.769231 
727.564103 
721.153846 
692.307692 
705.128205 
663.461538 
701.923077 
673.076923 
608.974359 
647.435897 
724.358974 
673.076923 
669.871795 
605.769231 
663.461538 
641.025641 
676.282051 
660.256410 
666.666667 
618.589744 
631.410256 
628.205128 
631.410256 
644.230769 
644.230769 
631.410256 
605.769231 
637.820513 
701.923077 
644.230769 
634.615385 
676.282051 
647.435897 
644.230769 
679.487179 
637.820513 
644.230769 
618.589744 
628.205128 
644.230769 
621.794872 
676.282051 
647.435897 
679.487179 
673.076923 
669.871795 
740.384615 
676.282051 
692.307692 
698.717949 
653.846154 
641.025641 
657.051282 
669.871795 
682.692308 
660.256410 
676.282051 
676.282051 
721.153846 
669.871795 
721.153846 
711.538462 
724.358974 
685.897436 
695.512821 
676.282051 
669.871795 
676.282051 
717.948718 
721.153846 
708.333333 
698.717949 
711.538462 
737.179487 
714.743590 
721.153846 
711.538462 
657.051282 
717.948718 
644.230769 
666.666667 
673.076923 
] [-46.000000
-49.000000
-53.000000
-45.000000
-49.000000
-44.000000
-60.000000
-56.000000
-62.000000
-61.000000
-43.000000
-65.000000
-52.000000
-59.000000
-55.000000
-58.000000
-52.000000
-51.000000
-68.000000
-63.000000
-61.000000
-70.000000
-58.000000
-59.000000
-51.000000
-44.000000
-59.000000
-46.000000
-54.000000
-44.000000
-37.000000
-46.000000
-55.000000
-65.000000
-61.000000
-45.000000
-59.000000
-53.000000
-47.000000
-32.000000
-26.000000
-38.000000
-35.000000
-52.000000
-53.000000
-61.000000
-67.000000
-66.000000
-63.000000
-59.000000
-64.000000
-67.000000
-44.000000
-55.000000
-45.000000
-46.000000
-51.000000
-34.000000
-41.000000
-43.000000
-48.000000
-45.000000
-54.000000
-51.000000
-46.000000
-45.000000
-54.000000
-45.000000
-57.000000
-55.000000
-57.000000
-60.000000
-62.000000
-63.000000
-64.000000
-68.000000
-62.000000
-57.000000
-65.000000
-74.000000
-57.000000
-53.000000
-18.000000
-14.000000
-18.000000
-19.000000
-13.000000
-16.000000
-37.000000
-23.000000
-16.000000
-21.000000
-81.000000
-51.000000
-66.000000
-62.000000
-54.000000
-78.000000
-85.000000
-63.000000
-75.000000
-75.000000
-54.000000
-77.000000
-61.000000
-55.000000
-51.000000
-72.000000
-36.000000
-63.000000
-87.000000
-40.000000
-30.000000
-1.000000
-1.000000
9.000000
9.000000
4.000000
15.000000
12.000000
5.000000
-11.000000
29.000000
39.000000
4.000000
32.000000
18.000000
5.000000
25.000000
-26.000000
-10.000000
5.000000
11.000000
12.000000
23.000000
23.000000
17.000000
26.000000
9.000000
21.000000
21.000000
36.000000
21.000000
12.000000
17.000000
42.000000
26.000000
40.000000
29.000000
41.000000
31.000000
35.000000
-8.000000
9.000000
58.000000
25.000000
-22.000000
40.000000
63.000000
22.000000
96.000000
7.000000
26.000000
14.000000
-40.000000
-4.000000
199.000000
202.000000
217.000000
195.000000
194.000000
138.000000
189.000000
208.000000
198.000000
199.000000
208.000000
180.000000
192.000000
188.000000
210.000000
192.000000
220.000000
221.000000
235.000000
222.000000
217.000000
214.000000
227.000000
202.000000
197.000000
215.000000
213.000000
217.000000
237.000000
228.000000
267.000000
262.000000
242.000000
-60.000000
-61.000000
-60.000000
-62.000000
-59.000000
-50.000000
-53.000000
-89.000000
225.000000
266.000000
215.000000
264.000000
-27.000000
-29.000000
-26.000000
-17.000000
-6.000000
-6.000000
-6.000000
-6.000000
-5.000000
-5.000000
-5.000000
31.000000
30.000000
28.000000
32.000000
37.000000
44.000000
61.000000
151.000000
171.000000
156.000000
140.000000
158.000000
154.000000
136.000000
110.000000
86.000000
119.000000
41.000000
79.000000
128.000000
189.000000
182.000000
132.000000
150.000000
217.000000
220.000000
99.000000
73.000000
83.000000
53.000000
63.000000
45.000000
45.000000
41.000000
50.000000
61.000000
71.000000
75.000000
75.000000
69.000000
96.000000
84.000000
39.000000
43.000000
41.000000
36.000000
59.000000
-29.000000
-30.000000
-34.000000
-42.000000
-44.000000
-46.000000
-40.000000
-26.000000
86.000000
108.000000
106.000000
89.000000
90.000000
101.000000
124.000000
124.000000
124.000000
124.000000
71.000000
52.000000
74.000000
51.000000
49.000000
50.000000
45.000000
38.000000
41.000000
37.000000
34.000000
38.000000
43.000000
37.000000
37.000000
43.000000
39.000000
23.000000
20.000000
34.000000
20.000000
-86.000000
204.000000
-68.000000
-2.000000
7.000000
253.000000
-44.000000
-58.000000
-85.000000
-76.000000
-60.000000
-62.000000
-70.000000
-50.000000
-33.000000
-23.000000
-26.000000
-40.000000
-44.000000
-47.000000
-38.000000
-52.000000
-50.000000
-51.000000
-66.000000
-75.000000
-79.000000
-87.000000
252.000000
245.000000
-88.000000
-89.000000
270.000000
245.000000
256.000000
237.000000
255.000000
-87.000000
257.000000
260.000000
268.000000
266.000000
265.000000
261.000000
253.000000
241.000000
242.000000
251.000000
270.000000
-83.000000
-89.000000
241.000000
-87.000000
264.000000
239.000000
266.000000
252.000000
245.000000
246.000000
242.000000
220.000000
230.000000
235.000000
234.000000
234.000000
225.000000
202.000000
202.000000
213.000000
204.000000
186.000000
176.000000
172.000000
182.000000
203.000000
211.000000
186.000000
163.000000
158.000000
164.000000
149.000000
153.000000
192.000000
142.000000
136.000000
135.000000
136.000000
133.000000
145.000000
158.000000
168.000000
190.000000
215.000000
235.000000
221.000000
241.000000
270.000000
-88.000000
152.000000
131.000000
143.000000
142.000000
177.000000
171.000000
176.000000
184.000000
183.000000
186.000000
190.000000
193.000000
204.000000
194.000000
198.000000
204.000000
212.000000
199.000000
194.000000
209.000000
214.000000
211.000000
213.000000
225.000000
237.000000
241.000000
254.000000
254.000000
246.000000
253.000000
258.000000
256.000000
255.000000
253.000000
251.000000
253.000000
261.000000
248.000000
237.000000
236.000000
240.000000
250.000000
249.000000
232.000000
240.000000
246.000000
247.000000
258.000000
259.000000
254.000000
253.000000
256.000000
258.000000
258.000000
255.000000
258.000000
258.000000
259.000000
258.000000
250.000000
243.000000
244.000000
245.000000
241.000000
237.000000
239.000000
246.000000
251.000000
256.000000
263.000000
258.000000
254.000000
257.000000
252.000000
251.000000
250.000000
255.000000
254.000000
256.000000
258.000000
259.000000
263.000000
265.000000
264.000000
267.000000
261.000000
-82.000000
-84.000000
-85.000000
-84.000000
268.000000
269.000000
-87.000000
263.000000
270.000000
270.000000
-88.000000
-83.000000
-86.000000
-83.000000
-87.000000
-85.000000
-83.000000
-80.000000
-70.000000
-80.000000
-62.000000
-76.000000
-77.000000
-77.000000
-81.000000
-72.000000
-71.000000
-70.000000
-63.000000
-71.000000
-76.000000
-66.000000
-69.000000
-72.000000
-77.000000
-77.000000
-76.000000
-70.000000
-67.000000
-58.000000
-56.000000
-65.000000
-76.000000
-66.000000
-65.000000
-60.000000
-83.000000
-69.000000
-71.000000
-73.000000
-63.000000
-67.000000
-70.000000
-76.000000
-77.000000
-77.000000
-86.000000
-83.000000
-88.000000
-89.000000
-88.000000
269.000000
-79.000000
-74.000000
-67.000000
267.000000
262.000000
267.000000
-70.000000
-81.000000
-55.000000
-79.000000
-61.000000
-77.000000
-52.000000
-72.000000
-65.000000
-59.000000
-44.000000
-49.000000
-71.000000
-71.000000
-38.000000
-47.000000
-48.000000
-45.000000
-72.000000
-60.000000
-55.000000
-74.000000
-36.000000
-64.000000
-49.000000
-46.000000
-37.000000
-79.000000
-45.000000
-50.000000
-35.000000
-41.000000
-39.000000
-34.000000
-42.000000
-35.000000
-36.000000
-37.000000
-40.000000
-53.000000
-35.000000
-45.000000
-44.000000
-37.000000
-38.000000
-24.000000
-31.000000
-28.000000
-31.000000
-34.000000
-28.000000
-21.000000
-26.000000
-40.000000
-37.000000
-23.000000
-33.000000
-38.000000
-32.000000
-31.000000
-30.000000
-35.000000
-33.000000
-30.000000
-34.000000
-36.000000
-35.000000
-32.000000
-34.000000
] 20 /a1 vectorplot
0 setlinewidth 0 0 1 setrgbcolor [] 0 setdash
637.5 500 moveto 637.5 750 lineto stroke
0 setlinewidth
[] 0 setdash
0 0 0 setrgbcolor
showpage
%%Trailer
%%EOF
